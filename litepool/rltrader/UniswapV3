{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "93c58ef3-928f-47c5-a95d-f7e165b0341a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current ETH/USDT Price: 3351.412343018306\n",
      "Current Tick: 195148\n",
      "Tick Range: 194100 to 196140\n",
      "Tick 194100: Price=3714.690159906242, LiquidityNet=-3819246369411428, CumulativeLiquidity=-3819246369411428\n",
      "Tick 194160: Price=3692.467642026879, LiquidityNet=9674448985077320, CumulativeLiquidity=5855202615665892\n",
      "Tick 194220: Price=3670.378066675597, LiquidityNet=-58557953108801, CumulativeLiquidity=5796644662557091\n",
      "Tick 194280: Price=3648.4206385457687, LiquidityNet=196952093756136508, CumulativeLiquidity=202748738418693599\n",
      "Tick 194340: Price=3626.5945670885553, LiquidityNet=31265002315940151, CumulativeLiquidity=234013740734633750\n",
      "Tick 194400: Price=3604.899066484445, LiquidityNet=9427180919659566, CumulativeLiquidity=243440921654293316\n",
      "Tick 194460: Price=3583.3333556149623, LiquidityNet=-4189957146553823, CumulativeLiquidity=239250964507739493\n",
      "Tick 194520: Price=3561.8966580345423, LiquidityNet=4030166402429132, CumulativeLiquidity=243281130910168625\n",
      "Tick 194580: Price=3540.588201942577, LiquidityNet=-3383144679714157, CumulativeLiquidity=239897986230454468\n",
      "Tick 194640: Price=3519.4072201556287, LiquidityNet=2119290411289602, CumulativeLiquidity=242017276641744070\n",
      "Tick 194700: Price=3498.3529500798054, LiquidityNet=25433069952361553, CumulativeLiquidity=267450346594105623\n",
      "Tick 194760: Price=3477.424633683308, LiquidityNet=24897931365686398, CumulativeLiquidity=292348277959792021\n",
      "Tick 194820: Price=3456.621517469138, LiquidityNet=-60008903755215004, CumulativeLiquidity=232339374204577017\n",
      "Tick 194880: Price=3435.942852447964, LiquidityNet=-19730476783975018, CumulativeLiquidity=212608897420601999\n",
      "Tick 194940: Price=3415.387894111164, LiquidityNet=-703160539386556, CumulativeLiquidity=211905736881215443\n",
      "Tick 195000: Price=3394.955902404011, LiquidityNet=203576492300961378, CumulativeLiquidity=415482229182176821\n",
      "Tick 195060: Price=3374.6461416990355, LiquidityNet=-194456910545432840, CumulativeLiquidity=221025318636743981\n",
      "Tick 195120: Price=3354.4578807695357, LiquidityNet=-12449544953736011, CumulativeLiquidity=208575773683007970\n",
      "Tick 195180: Price=3334.390392763254, LiquidityNet=-4083496027183193, CumulativeLiquidity=204492277655824777\n",
      "Tick 195240: Price=3314.442955176204, LiquidityNet=31224407875715642, CumulativeLiquidity=235716685531540419\n",
      "Tick 195300: Price=3294.6148498266607, LiquidityNet=11557392429951126, CumulativeLiquidity=247274077961491545\n",
      "Tick 195360: Price=3274.905362829302, LiquidityNet=-33255545319153449, CumulativeLiquidity=214018532642338096\n",
      "Tick 195420: Price=3255.3137845695055, LiquidityNet=520415828578516, CumulativeLiquidity=214538948470916612\n",
      "Tick 195480: Price=3235.839409677803, LiquidityNet=244461395463260, CumulativeLiquidity=214783409866379872\n",
      "Tick 195540: Price=3216.481537004479, LiquidityNet=-1871532710551440, CumulativeLiquidity=212911877155828432\n",
      "Tick 195600: Price=3197.239469594332, LiquidityNet=-159254253301760082, CumulativeLiquidity=53657623854068350\n",
      "Tick 195660: Price=3178.1125146615796, LiquidityNet=-246033868040580, CumulativeLiquidity=53411589986027770\n",
      "Tick 195720: Price=3159.099983564914, LiquidityNet=1572008849959990, CumulativeLiquidity=54983598835987760\n",
      "Tick 195780: Price=3140.201191782711, LiquidityNet=-475961871387751, CumulativeLiquidity=54507636964600009\n",
      "Tick 195840: Price=3121.4154588883825, LiquidityNet=-2149806553139472, CumulativeLiquidity=52357830411460537\n",
      "Tick 195900: Price=3102.74210852588, LiquidityNet=-7443247520258013, CumulativeLiquidity=44914582891202524\n",
      "Tick 195960: Price=3084.1804683853443, LiquidityNet=-22491971834176533, CumulativeLiquidity=22422611057025991\n",
      "Tick 196020: Price=3065.729870178896, LiquidityNet=-12427644005263164, CumulativeLiquidity=9994967051762827\n",
      "Tick 196080: Price=3047.389649616579, LiquidityNet=-988311789113510, CumulativeLiquidity=9006655262649317\n",
      "Tick 196140: Price=3029.159146382441, LiquidityNet=-1760063165597972, CumulativeLiquidity=7246592097051345\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import math\n",
    "from web3 import Web3\n",
    "\n",
    "# Connect to Ethereum mainnet via Infura\n",
    "INFURA_URL = \"https://rpc.mevblocker.io\"\n",
    "web3 = Web3(Web3.HTTPProvider(INFURA_URL))\n",
    "\n",
    "# Uniswap V3 ETH/USDT 0.3% pool contract address and ABI\n",
    "POOL_ADDRESS = Web3.to_checksum_address(\"0x8ad599c3a0ff1de082011efddc58f1908eb6e6d8\")  # ETH/USDT 0.3% fee pool\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "POOL_ABI = [\n",
    "    {\n",
    "        \"constant\": True,\n",
    "        \"inputs\": [],\n",
    "        \"name\": \"slot0\",\n",
    "        \"outputs\": [\n",
    "            {\"name\": \"sqrtPriceX96\", \"type\": \"uint256\"},\n",
    "            {\"name\": \"tick\", \"type\": \"int24\"},\n",
    "            {\"name\": \"observationIndex\", \"type\": \"uint16\"},\n",
    "            {\"name\": \"observationCardinality\", \"type\": \"uint16\"},\n",
    "            {\"name\": \"observationCardinalityNext\", \"type\": \"uint16\"},\n",
    "            {\"name\": \"feeProtocol\", \"type\": \"uint8\"},\n",
    "            {\"name\": \"unlocked\", \"type\": \"bool\"},\n",
    "        ],\n",
    "        \"payable\": False,\n",
    "        \"stateMutability\": \"view\",\n",
    "        \"type\": \"function\",\n",
    "    },\n",
    "    {\n",
    "        \"constant\": True,\n",
    "        \"inputs\": [{\"name\": \"tick\", \"type\": \"int24\"}],\n",
    "        \"name\": \"ticks\",\n",
    "        \"outputs\": [\n",
    "            {\"name\": \"liquidityGross\", \"type\": \"uint128\"},\n",
    "            {\"name\": \"liquidityNet\", \"type\": \"int128\"},\n",
    "        ],\n",
    "        \"payable\": False,\n",
    "        \"stateMutability\": \"view\",\n",
    "        \"type\": \"function\",\n",
    "    },\n",
    "]\n",
    "\n",
    "# Load the pool contract\n",
    "pool_contract = web3.eth.contract(address=POOL_ADDRESS, abi=POOL_ABI)\n",
    "\n",
    "# Fetch slot0 data\n",
    "slot0 = pool_contract.functions.slot0().call()\n",
    "sqrtPriceX96 = slot0[0]\n",
    "current_tick = slot0[1]\n",
    "\n",
    "# Convert sqrtPriceX96 to ETH/USDT price\n",
    "current_price = ((2**96) / sqrtPriceX96) ** 2\n",
    "print(f\"Current ETH/USDT Price: {current_price * 10**12}\")\n",
    "print(f\"Current Tick: {current_tick}\")\n",
    "\n",
    "# Define tick range\n",
    "TICK_SPACING = 60  # Tick spacing for the 0.3% fee tier\n",
    "TICK_LOWER = current_tick - 1000  # Query 2000 ticks below the current tick\n",
    "TICK_UPPER = current_tick + 1000  # Query 2000 ticks above the current tick\n",
    "\n",
    "TICK_LOWER -= TICK_LOWER % TICK_SPACING\n",
    "TICK_UPPER -= TICK_UPPER % TICK_SPACING\n",
    "\n",
    "print(f\"Tick Range: {TICK_LOWER} to {TICK_UPPER}\")\n",
    "\n",
    "# Helper function to convert tick to price\n",
    "def tick_to_price(tick):\n",
    "    return (1-.0001) ** tick * (10**12)\n",
    "\n",
    "# Fetch tick data and construct the virtual liquidity curve\n",
    "tick_data = []\n",
    "cumulative_liquidity = 0\n",
    "for tick in range(TICK_LOWER, TICK_UPPER + 1, TICK_SPACING):\n",
    "    try:\n",
    "        # Fetch data for the current tick\n",
    "        tick_info = pool_contract.functions.ticks(tick).call()\n",
    "        liquidity_net = tick_info[1]  # liquidityNet\n",
    "        price = tick_to_price(tick)\n",
    "        # Update cumulative liquidity\n",
    "        cumulative_liquidity += liquidity_net\n",
    "\n",
    "        # Append data for plotting\n",
    "        tick_data.append({\"tick\": tick, \"price\": price, \"cumulative_liquidity\": cumulative_liquidity})\n",
    "\n",
    "        print(f\"Tick {tick}: Price={price}, LiquidityNet={liquidity_net}, CumulativeLiquidity={cumulative_liquidity}\")\n",
    "    except Exception as e:\n",
    "        print(f\"Error fetching tick {tick}: {e}\")\n",
    "        continue\n",
    "\n",
    "# Check if tick_data is empty\n",
    "if not tick_data:\n",
    "    print(\"No liquidity found in the specified range. Try adjusting the tick range.\")\n",
    "    exit()\n",
    "\n",
    "# Extract prices and cumulative liquidity for plotting\n",
    "prices = [tick[\"price\"] for tick in tick_data]\n",
    "liquidity = [tick[\"cumulative_liquidity\"] for tick in tick_data]\n",
    "\n",
    "# Plot the virtual liquidity curve\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(prices, liquidity, label=\"Virtual Liquidity Curve\", color=\"blue\")\n",
    "#plt.axvline(x=current_price, color=\"red\", linestyle=\"--\", label=\"Current ETH/USDT Price\")\n",
    "plt.xlabel(\"ETH/USDT Price\")\n",
    "plt.ylabel(\"Cumulative Liquidity\")\n",
    "plt.title(\"Uniswap V3 Virtual Liquidity Curve (ETH/USDT 0.3%)\")\n",
    "#plt.xscale(\"log\")  # Logarithmic scale for price\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "31b4704f-e906-4f1c-9116-a6e070b2fcff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "To earn 10% of fees in the range $3150 - $3250:\n",
      "  You need to deposit 403248301740243.25 Token0 (e.g., ETH)\n",
      "  You need to deposit 0.09846732268919228 Token1 (e.g., USDT)\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "current_price = 3200  # Current ETH/USDT price\n",
    "P_lower = 3150        # Lower price of the range\n",
    "P_upper = 3250        # Upper price of the range\n",
    "total_liquidity = 1113996585471428949  # Total liquidity in the range (from pool contract)\n",
    "fee_share = 0.10      # Share of fees you want (10%)\n",
    "\n",
    "# Calculate your required liquidity\n",
    "your_liquidity = total_liquidity * fee_share\n",
    "\n",
    "# Convert prices to square root prices\n",
    "sqrt_P_lower = math.sqrt(P_lower)\n",
    "sqrt_P_upper = math.sqrt(P_upper)\n",
    "\n",
    "# Calculate the required token amounts\n",
    "amount_token0 = your_liquidity * (sqrt_P_upper * sqrt_P_lower) / (sqrt_P_upper - sqrt_P_lower)\n",
    "amount_token1 = your_liquidity * (sqrt_P_upper - sqrt_P_lower)\n",
    "\n",
    "# Output the results\n",
    "print(f\"To earn 10% of fees in the range ${P_lower} - ${P_upper}:\")\n",
    "print(f\"  You need to deposit {amount_token0 / (10**6)} Token0 (e.g., ETH)\")\n",
    "print(f\"  You need to deposit {amount_token1 / (10**18)} Token1 (e.g., USDT)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7ff86e6b-4ae6-4e63-8cda-acee9d7cac06",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
